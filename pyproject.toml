[project]
name = "luxonis-train"
description = "Luxonis training framework for seamless training of various neural networks."
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
authors = [{ name = "Luxonis", email = "support@luxonis.com" }]
maintainers = [{ name = "Luxonis", email = "support@luxonis.com" }]
keywords = ["ml", "training", "luxonis", "oak"]
dynamic = ["dependencies", "optional-dependencies", "version"]
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Development Status :: 4 - Beta",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Image Processing",
  "Topic :: Scientific/Engineering :: Image Recognition",
]

[project.scripts]
luxonis_train = "luxonis_train.__main__:app"

[project.urls]
repository = "https://github.com/luxonis/luxonis-train"
issues = "https://github.com/luxonis/luxonis-train/issues"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }
optional-dependencies = { dev = { file = ["requirements-dev.txt"] } }
version = {attr = "luxonis_train.__version__"}

[tool.ruff]
target-version = "py310"
line-length = 79
indent-width = 4

[tool.ruff.lint]
ignore = ["F403", "B028", "B905", "D1", "W191"]
select = ["E4", "E7", "E9", "F", "W", "B", "I"]

[tool.docformatter]
black = true
style = "epytext"
wrap-summaries = 72
wrap-descriptions = 72

[tool.pyright]
typeCheckingMode = "basic"
reportMissingTypeStubs = "none"
reportPrivateImportUsage = "none"
reportPrivateUsage = "none"
reportIncompatibleVariableOverride = "none"
reportIncompatibleMethodOverride = "none"
reportUnnecessaryIsInstance = "none"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--disable-warnings"
markers = [
    "unit: mark a test as a unit test",
    "integration: mark a test as an integration test",
]

[tool.coverage.run]
omit = [
    "**/__main__.py",
    "**/gpu_stats_monitor.py"
]

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "def __rich_repr__",
    "def __str__",
    "assert",
    "raise NotImplementedError",
    "except ImportError",
    "@abstractmethod",
    "@overload",
    "exit\\(\\)",
    "cv2\\.imshow",
    "cv2\\.waitKey",
    "logger\\.",
]
