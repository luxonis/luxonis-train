loader:

  # Yields "left", "right", "disparity", and "pointcloud" inputs.
  # See implementation in `tests/integration/test_multi_input.py`.
  name: CustomMultiInputLoader

  # Name of the key in the batch that contains image-like data.
  # Needs to be set for visualizers and evaluators to work.
  image_source: left

model:
  name: example_multi_input
  nodes:
    - name: FullBackbone

    - name: RGBDBackbone
      input_sources:
        - left
        - right
        - disparity

    - name: PointcloudBackbone
      input_sources:
        - pointcloud

    - name: FusionNeck
      inputs:
        - RGBDBackbone
        - PointcloudBackbone
      input_sources:
        - disparity

    - name: FusionNeck2
      inputs:
        - RGBDBackbone
        - PointcloudBackbone
        - FullBackbone

    - name: CustomSegHead1
      inputs:
        - FusionNeck
      losses:
        - name: BCEWithLogitsLoss
      metrics:
        - name: JaccardIndex
          is_main_metric: true
          params:
            task: binary
      visualizers:
        - name: SegmentationVisualizer

    - name: CustomSegHead2
      inputs:
        - FusionNeck
        - FusionNeck2
      input_sources:
        - disparity
      losses:
        - name: CrossEntropyLoss
      metrics:
        - name: JaccardIndex
          params:
            task: binary
      visualizers:
        - name: SegmentationVisualizer

tracker:
  project_name: multi_input_example
  is_tensorboard: True

trainer:
  batch_size: 1
  epochs: 10
  n_workers: 4
  validation_interval: 10
  n_log_images: 4

  callbacks:
    - name: ExportOnTrainEnd

  optimizer:
    name: Adam
    params:
      lr: 0.01

exporter:
  onnx:
    opset_version: 11
